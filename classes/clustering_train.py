# -*- coding: utf-8 -*-
"""clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Khl00BImsc0XbMMyLwkq78DyGHzmXK-v
"""

import pickle
import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
from datetime import datetime, date
import matplotlib.pyplot as plt
from kneed import KneeLocator
from classes.helper import age_categorization, is_student

df = pd.read_csv("udemy_user_data.csv")
# df.head()

df[['age', 'age_category']] = df.apply(lambda x: age_categorization(x.birthdate), axis=1, result_type='expand')
df.age = df.age.astype('i')
df['is_student'] = df.age.apply(is_student)

# df

df[['gender', 'age_category', 'is_student']] = df[['gender', 'age_category', 'is_student']].astype('category')
age_category = dict(enumerate(df['age_category'].cat.categories))
gender = dict(enumerate(df['gender'].cat.categories))
is_student_dic = dict(enumerate(df['is_student'].cat.categories))
pickle.dump(age_category, open('./models/age_category.pkl', 'wb'))
pickle.dump(gender, open('./models/gender.pkl', 'wb'))
pickle.dump(is_student_dic, open('./models/is_student.pkl', 'wb'))
df['age_category'] = df['age_category'].cat.codes
df['gender'] = df['gender'].cat.codes
df['is_student'] = df['is_student'].cat.codes
# df

df_subset = df[['gender', 'age_category', 'is_student']]

"""# here training phase"""

x = df_subset.values
x

kmeans = KMeans(n_clusters=10, random_state=0)
kmeans.fit(x)
kmeans.inertia_

sse = []

for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=0)
    kmeans.fit(x)
    sse.append(kmeans.inertia_)

plt.style.use("fivethirtyeight")
plt.plot(range(1, 11), sse)
plt.xticks(range(1, 11))
plt.xlabel("Number of clusters")
plt.ylabel("Sum of squared error")
plt.show()

k1 = KneeLocator(range(1, 11), sse, curve='convex', direction='decreasing')
k1.elbow

kmeans = KMeans(n_clusters=k1.elbow, random_state=0)
kmeans.fit(x)
kmeans.inertia_

labels = kmeans.labels_

print(labels)
pickle.dump(kmeans, open('./models/kmeans_model.pkl', 'wb'))
pickle.dump(labels, open('./models/kmeans_labels.pkl', 'wb'))
